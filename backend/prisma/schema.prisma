// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                 Int       @id @default(autoincrement())
  name               String
  location           String
  companyDescription String
  contactInfo        String
  employees          Employee[]
  positions          Position[]
}

model Employee {
  id         Int       @id @default(autoincrement())
  companyId  Int
  name       String
  email      String
  role       String
  isActive   Boolean
  company    Company   @relation(fields: [companyId], references: [id])
  interviews InterviewEmployee[]
  feedbacks  InterviewFeedback[]
}

model Position {
  id                Int       @id @default(autoincrement())
  companyId         Int
  interviewFlowId   Int
  title             String
  description       String
  status            String
  isVisible         Boolean
  jobDescription    String
  requirements      String
  responsibilities  String
  salaryMin         Float
  salaryMax         Float
  employmentType    String
  benefits          String
  applicationDeadline DateTime
  company           Company   @relation(fields: [companyId], references: [id])
  interviewFlow     InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  applications      Application[]
}

model InterviewFlow {
  id          Int             @id @default(autoincrement())
  description String
  steps       InterviewStep[]
  positions   Position[]
}

model InterviewStep {
  id             Int             @id @default(autoincrement())
  interviewFlowId Int
  interviewTypeId Int
  name           String
  orderIndex     Int
  interviewFlow  InterviewFlow   @relation(fields: [interviewFlowId], references: [id])
  interviewType  InterviewType   @relation(fields: [interviewTypeId], references: [id])
  interviews     Interview[]
}

model InterviewType {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  steps       InterviewStep[]
}

model Candidate {
  id        Int          @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  phone     String
  address   String
  applications Application[]
}

model Application {
  id            Int       @id @default(autoincrement())
  positionId    Int
  candidateId   Int
  applicationDate DateTime
  status        String
  notes         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  position      Position  @relation(fields: [positionId], references: [id])
  candidate     Candidate @relation(fields: [candidateId], references: [id])
  interviews    Interview[]
  statusHistory ApplicationStatusHistory[]
}

model ApplicationStatusHistory {
  id            Int       @id @default(autoincrement())
  applicationId Int
  status        String
  changedAt     DateTime  @default(now())
  application   Application @relation(fields: [applicationId], references: [id])
}

model Interview {
  id             Int       @id @default(autoincrement())
  applicationId  Int
  interviewStepId Int
  interviewDate  DateTime
  result         String
  score          Int
  notes          String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  application    Application @relation(fields: [applicationId], references: [id])
  interviewStep  InterviewStep @relation(fields: [interviewStepId], references: [id])
  employees      InterviewEmployee[]
  feedbacks      InterviewFeedback[]
}

model InterviewEmployee {
  id          Int       @id @default(autoincrement())
  interviewId Int
  employeeId  Int
  interview   Interview @relation(fields: [interviewId], references: [id])
  employee    Employee  @relation(fields: [employeeId], references: [id])
}

model InterviewFeedback {
  id          Int       @id @default(autoincrement())
  interviewId Int
  employeeId  Int
  feedback    String
  createdAt   DateTime  @default(now())
  interview   Interview @relation(fields: [interviewId], references: [id])
  employee    Employee  @relation(fields: [employeeId], references: [id])
}